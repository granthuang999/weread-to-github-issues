name: Sync Bookshelf Issue to Main Repo

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Sync Bookshelf to This Repo"]
    types:
      - completed

jobs:
  sync:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      issues: write

    steps:
      # 第1步：获取源仓库Issue的内容
      - name: Get source issue content
        id: get_source_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WEREAD_PAT }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const title = "我的微信读书书架 / My WeRead Bookshelf";

            const { data: issues } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue is:open in:title "${title}"`,
            });
            
            if (issues.items.length === 0) {
              core.setFailed(`在 ${owner}/${repo} 中未找到标题为 "${title}" 的源Issue。`);
              return;
            }
            
            const issue = issues.items[0];
            console.log(`在 ${owner}/${repo} 中找到源Issue #${issue.number}。`);
            core.setOutput('body', issue.body);
      
      # 第2步：在目标仓库中创建或更新Issue (已修正)
      - name: Create or Update Issue in Target Repo
        env:
          GH_TOKEN: ${{ secrets.WEREAD_PAT }}
          ISSUE_BODY: ${{ steps.get_source_issue.outputs.body }}
          ISSUE_TITLE: "我的微信读书书架 / My WeRead Bookshelf"
          TARGET_REPO: granthuang999/granthuang999.github.io
        run: |
          # 将原始的Issue正文写入文件
          echo "$ISSUE_BODY" > body.md
          
          # 【新增】为确保格式正确，先追加一个空行
          echo "" >> body.md
          
          # 【新增】追加您指定的完整内容到文件的最后一行
          # 使用单引号''可以防止内容中的特殊字符被Shell解析
          echo '##{"slug": "weread-shelf-sync", "keywords": "weread，微信读书，微信读书同步，个人书单，中年书单", "description": "通过https://github.com/sailor0913/weread-to-notion得到启发把微信读书的状态同步到github issues，然后渲染生成本页面，因为原来的api已经修改了权限，导致现在无法获取读书划线和评论，只能获取书籍的基本信息和读书状态，也欢迎大家在本页面下留言讨论，谢谢"}' >> body.md

          # 后续的创建/更新逻辑保持不变
          issue_number=$(gh issue list -R "$TARGET_REPO" --search "in:title \"$ISSUE_TITLE\"" --json number -q '.[0].number')

          if [ -n "$issue_number" ]; then
            echo "正在更新仓库 $TARGET_REPO 中的已有Issue #${issue_number}。"
            gh issue edit "$issue_number" -R "$TARGET_REPO" --body-file body.md
          else
            echo "正在仓库 $TARGET_REPO 中创建新的Issue。"
            gh issue create -R "$TARGET_REPO" --title "$ISSUE_TITLE" --body-file body.md --label "bookshelf,automated"
          fi
